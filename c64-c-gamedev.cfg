FEATURES {
    STARTADDRESS: default = $0801;
}
SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
    __HIMEM__:     type = weak, value = $D000;
}
MEMORY {
    ZP:       file = "", define = yes, start = $0002,           size = $001A;
    LOADADDR: file = %O,               start = %S - 2,          size = $0002;
    HEADER:   file = %O, define = yes, start = %S,              size = $000D;

    # There may be no gaps between MEMORY areas, so fill up the space until CHARSET starts.
    # Music can be placed here as well.
    STARTRAM: file = %O, define = yes, start = __HEADER_LAST__, 	size = $2000 - __HEADER_LAST__, fill = yes;
    # Custom charsets can be stored at $2000. That is the first available area not shadowed by charset rom.
    CHARSET: file = %O, define = yes, start = $2000, size = $1000;

    MAIN:     file = %O, define = yes, start = __CHARSET_LAST__, size = __HIMEM__ - __CHARSET_LAST__;
    BSS:      file = "",               start = __ONCE_RUN__,    size = __HIMEM__ - __STACKSIZE__ - __ONCE_RUN__;
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    # STARTUP Is normally placed in MAIN, but it fits before the CHARSET, so we might as well use it.
    STARTUP:  load = STARTRAM, type = ro;
    # Make the CHARSET memory area available to the linker.
    CHARSET: load = CHARSET, type = ro;
    CODE:     load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = rw;
    ONCE:     load = MAIN,     type = ro,  define   = yes;
    BSS:      load = BSS,      type = bss, define   = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
